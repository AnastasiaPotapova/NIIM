from main_imports import *
from ShematicWindow import *
from GraphWindow import *

class EepromWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–î–∞–Ω–Ω—ã–µ EEPROM")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
        input_layout = QHBoxLayout()
        self.start_input = QLineEdit()
        self.end_input = QLineEdit()
        self.start_input.setPlaceholderText("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        self.end_input.setPlaceholderText("–ö–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
        input_layout.addWidget(QLabel("–û—Ç:"))
        input_layout.addWidget(self.start_input)
        input_layout.addWidget(QLabel("–î–æ:"))
        input_layout.addWidget(self.end_input)

        self.layout.addLayout(input_layout)

        buttons_layout = QHBoxLayout()
        self.generate_button = QPushButton("–ü—Ä–æ—á–∏—Ç–∞—Ç—å")
        self.generate_button.clicked.connect(self.generate_table)
        buttons_layout.addWidget(self.generate_button)

        self.save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_button.clicked.connect(self.save_table)
        buttons_layout.addWidget(self.save_button)

        self.layout.addLayout(buttons_layout)

        self.table = QTableWidget()
        self.layout.addWidget(self.table)

    def generate_table(self):
        try:
            start = int(self.start_input.text())
            end = int(self.end_input.text())
            if start > end:
                raise ValueError("–ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–Ω–µ—á–Ω–æ–º—É.")
        except ValueError:
            self.start_input.setText("")
            self.end_input.setText("")
            self.start_input.setPlaceholderText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞")
            self.end_input.setPlaceholderText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞")
            return

        count = end - start + 1
        self.table.setRowCount(count)
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["–ò–Ω–¥–µ–∫—Å", "Ox", "Od"])

        for i, index in enumerate(range(start, end + 1)):
            # –Ø—á–µ–π–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.table.setItem(i, 0, QTableWidgetItem(str(index)))
            self.table.setItem(i, 1, QTableWidgetItem(str(random.randint(0, 100))))
            self.table.setItem(i, 2, QTableWidgetItem(str(random.randint(0, 100))))

    def save_table(self):
        rows = self.table.rowCount()
        cols = self.table.columnCount()

        result = []
        for row in range(rows):
            row_data = []
            for col in range(cols):
                item = self.table.item(row, col)
                text = item.text() if item else ""
                row_data.append(text)
            result.append(row_data)

        # –ü—Ä–∏–º–µ—Ä: –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
        print("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for r in result:
            print(r)

class ConfigWidget(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        self.setFixedSize(400, 300)
        self.layout = QVBoxLayout(self)

        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(3)  # 2 —Å—Ç–æ–ª–±—Ü–∞ –¥–∞–Ω–Ω—ã—Ö + 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–Ω–æ–ø–∫–∏
        self.table.setHorizontalHeaderLabels(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ", ""])  # —Ç—Ä–µ—Ç–∏–π –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        self.layout.addWidget(self.table)

        # –ù–∞—á–∞–ª—å–Ω—ã–µ 3 —Å—Ç—Ä–æ–∫–∏
        for _ in range(3):
            self.add_row()

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É")
        self.add_button.clicked.connect(self.add_row)
        self.layout.addWidget(self.add_button)
        self.save_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.layout.addWidget(self.save_button)

    def add_row(self):
        row_position = self.table.rowCount()
        self.table.insertRow(row_position)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —è—á–µ–π–∫–∏
        self.table.setItem(row_position, 0, QTableWidgetItem(""))
        self.table.setItem(row_position, 1, QTableWidgetItem(""))

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = QPushButton("üóô")
        delete_button.setStyleSheet("color: red; font-weight: bold;")
        delete_button.clicked.connect(lambda _, r=row_position: self.delete_row(r))
        self.table.setCellWidget(row_position, 2, delete_button)

    def delete_row(self, row):
        self.table.removeRow(row)

        # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã lambda –Ω–µ —Ö—Ä–∞–Ω–∏–ª —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        for r in range(self.table.rowCount()):
            button = QPushButton("üóô")
            button.setStyleSheet("color: red; font-weight: bold;")
            button.clicked.connect(lambda _, row=r: self.delete_row(row))
            self.table.setCellWidget(r, 2, button)

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SCADA NIIM")
        self.setGeometry(100, 100, 1280, 1024)
        self.setup_ui()
        self.mode = 0

    def setup_ui(self):
        main_layout = QGridLayout()
        work_panel = QWidget()
        work_layout = QHBoxLayout()
        work_panel.setLayout(work_layout)
        self.setLayout(main_layout)

        menubar = QMenuBar()
        actionFile = menubar.addMenu("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        avto = actionFile.addAction("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π")
        avto.triggered.connect(self.setAvto)
        pro = actionFile.addAction("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
        pro.triggered.connect(self.setPro)
        EepromBar = menubar.addMenu("–≠–°–ü–ü–ó–£")
        EepromWrite = EepromBar.addAction("–ó–∞–ø–∏—Å–∞—Ç—å")

        EepromRead = EepromBar.addAction("–ü—Ä–æ—á–∏—Ç–∞—Ç—å")
        EepromRead.triggered.connect(self.ReadEeprom)

        Config = menubar.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        Config.triggered.connect(self.ReadConfig)

        menubar.addMenu("–õ–æ–≥–∏")

        # === Block 1: Control Panel with Scroll ===
        self.work_control = QStackedWidget()


        control_panel = QWidget()
        self.work_control.addWidget(control_panel)
        control_layout = QVBoxLayout()
        control_panel.setLayout(control_layout)

        scroll_area = QScrollArea()
        scroll_area.setWidget(self.work_control)
        scroll_area.setWidgetResizable(True)
        scroll_area.setFixedWidth(200)

        self.v1_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V1")
        self.v1_button.clicked.connect(lambda: self.toggle_valve("V1"))
        control_layout.addWidget(self.v1_button)

        self.v2_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V2")
        self.v2_button.clicked.connect(lambda: self.toggle_valve("V2"))
        control_layout.addWidget(self.v2_button)

        self.v3_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V3")
        self.v3_button.clicked.connect(lambda: self.toggle_valve("V3"))
        control_layout.addWidget(self.v3_button)

        self.v4_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V4")
        self.v4_button.clicked.connect(lambda: self.toggle_valve("V4"))
        control_layout.addWidget(self.v4_button)

        self.v5_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V5")
        self.v5_button.clicked.connect(lambda: self.toggle_valve("V5"))
        control_layout.addWidget(self.v5_button)

        self.v8_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V8")
        self.v8_button.clicked.connect(lambda: self.toggle_valve("V8"))
        control_layout.addWidget(self.v8_button)

        basic_panel = QWidget()
        self.work_control.addWidget(basic_panel)
        basic_layout = QVBoxLayout()
        basic_panel.setLayout(basic_layout)

        self.v10_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V1")
        self.v10_button.clicked.connect(lambda: self.toggle_valve("V1"))
        basic_layout.addWidget(self.v10_button)

        self.v20_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –∫–ª–∞–ø–∞–Ω V2")
        self.v20_button.clicked.connect(lambda: self.toggle_valve("V2"))
        basic_layout.addWidget(self.v20_button)

        # === Block 2: Schematic Widget ===
        self.schematic = SchematicWidget()

        # === Block 3: Graph Panel with 4 Graphs ===
        self.graph_panel = GraphPanel()

        # Add blocks to main layout
        main_layout.addWidget(menubar, 0, 0)
        work_layout.addWidget(scroll_area)
        work_layout.addWidget(self.schematic, stretch=1)
        work_layout.addWidget(self.graph_panel, stretch=1)
        main_layout.addWidget(work_panel)

    def setAvto(self):
        self.work_control.setCurrentIndex(1)

    def setPro(self):
        self.work_control.setCurrentIndex(0)

    def ReadEeprom(self):
        self.w = EepromWindow()
        self.w.show()

    def ReadConfig(self):
        self.w2 = ConfigWidget()
        self.w2.show()

    def display_data(self, data):
        self.graph_panel.update_plots([data["MIDA"], data["Magdischarge"], data["ThermalIndicator"]])

    def display_error(self, error_msg):
        ...

    def update_connection_status(self, connected):
        ...

    def toggle_valve(self, name):
        self.schematic.toggle_valve(name)
        self.graph_panel.mark_event()

class LoadingWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–û–∂–∏–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        layout = QVBoxLayout()
        layout.addWidget(QLabel("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ COM..."))
        self.setLayout(layout)
        self.setGeometry(100, 100, 300, 100)

class App:
    def __init__(self):
        self.app = QApplication(sys.argv)

        self.loading = LoadingWindow()
        self.main = MainWindow()
        self.loading.show()
        self.serial_thread = None
        self.serial_worker = None
        self.display_data = None
        self.display_error = None
        self.update_connection_status = None

        self.start_serial_thread()

    def launch_main_window(self):
        self.loading.close()
        self.main.show()

    def start_serial_thread(self):
        self.serial_worker = SerialWorker()
        self.serial_thread = QThread()

        self.serial_worker.moveToThread(self.serial_thread)

        #self.serial_worker.data_received.connect(self.display_data)
        #self.serial_worker.error_occurred.connect(self.display_error)
        self.serial_worker.connection_status.connect(self.launch_main_window)

        self.serial_thread.started.connect(self.serial_worker.connect_serial)
        self.serial_thread.started.connect(self.serial_worker.read_serial_data)

        if self.update_connection_status:
            self.launch_main_window()

        self.serial_thread.start()

    def stop_serial_thread(self):
        if self.serial_worker:
            self.serial_worker.stop()
        if self.serial_thread:
            self.serial_thread.quit()
            self.serial_thread.wait()

        self.serial_worker = None
        self.serial_thread = None


    def run(self):
        sys.exit(self.app.exec_())